# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\Dropbox\Dropbox\pw_pipeline\pw_pipeline\assets\houdini\python\VEX\pw_Houdini_VEX_Editor\pw_VEX_Editor\widgets\editor_window.ui'
#
# Created: Mon Apr 18 09:16:53 2016
#      by: pyside-uic 0.2.15 running on PySide 1.2.4
#
# WARNING! All changes made in this file will be lost!

try:
    from PySide.QtCore import *
    from PySide.QtGui import *
except:
    from PySide2.QtCore import *
    from PySide2.QtGui import *
    from PySide2.QtWidgets import *

class Ui_editor_window(object):
    def setupUi(self, editor_window):
        editor_window.setObjectName("editor_window")
        editor_window.resize(864, 609)
        self.centralwidget = QWidget(editor_window)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_4 = QVBoxLayout(self.centralwidget)
        self.verticalLayout_4.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.splitter = QSplitter(self.centralwidget)
        self.splitter.setOrientation(Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.widget = QWidget(self.splitter)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.toolbar_wd = QFrame(self.widget)
        self.toolbar_wd.setFrameShape(QFrame.StyledPanel)
        self.toolbar_wd.setFrameShadow(QFrame.Raised)
        self.toolbar_wd.setObjectName("toolbar_wd")
        self.horizontalLayout = QHBoxLayout(self.toolbar_wd)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setContentsMargins(0, 3, 0, 3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.load_from_selected_btn = QPushButton(self.toolbar_wd)
        self.load_from_selected_btn.setMinimumSize(QSize(40, 40))
        self.load_from_selected_btn.setMaximumSize(QSize(40, 40))
        self.load_from_selected_btn.setObjectName("load_from_selected_btn")
        self.horizontalLayout.addWidget(self.load_from_selected_btn)
        self.load_from_selected_extra_btn = QPushButton(self.toolbar_wd)
        self.load_from_selected_extra_btn.setMinimumSize(QSize(40, 40))
        self.load_from_selected_extra_btn.setMaximumSize(QSize(40, 40))
        self.load_from_selected_extra_btn.setObjectName("load_from_selected_extra_btn")
        self.horizontalLayout.addWidget(self.load_from_selected_extra_btn)
        self.load_from_file_btn = QPushButton(self.toolbar_wd)
        self.load_from_file_btn.setMinimumSize(QSize(40, 40))
        self.load_from_file_btn.setMaximumSize(QSize(40, 40))
        self.load_from_file_btn.setObjectName("load_from_file_btn")
        self.horizontalLayout.addWidget(self.load_from_file_btn)
        self.blank_tab_btn = QPushButton(self.toolbar_wd)
        self.blank_tab_btn.setMinimumSize(QSize(40, 40))
        self.blank_tab_btn.setMaximumSize(QSize(40, 40))
        self.blank_tab_btn.setObjectName("blank_tab_btn")
        self.horizontalLayout.addWidget(self.blank_tab_btn)
        self.line_2 = QFrame(self.toolbar_wd)
        self.line_2.setFrameShape(QFrame.VLine)
        self.line_2.setFrameShadow(QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout.addWidget(self.line_2)
        self.save_current_btn = QPushButton(self.toolbar_wd)
        self.save_current_btn.setMinimumSize(QSize(40, 40))
        self.save_current_btn.setMaximumSize(QSize(40, 40))
        self.save_current_btn.setObjectName("save_current_btn")
        self.horizontalLayout.addWidget(self.save_current_btn)
        self.reload_current_btn = QPushButton(self.toolbar_wd)
        self.reload_current_btn.setMinimumSize(QSize(40, 40))
        self.reload_current_btn.setMaximumSize(QSize(40, 40))
        self.reload_current_btn.setObjectName("reload_current_btn")
        self.horizontalLayout.addWidget(self.reload_current_btn)
        spacerItem = QSpacerItem(10, 20, QSizePolicy.Maximum, QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.line = QFrame(self.toolbar_wd)
        self.line.setFrameShape(QFrame.VLine)
        self.line.setFrameShadow(QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout.addWidget(self.line)
        self.node_info_wd = QWidget(self.toolbar_wd)
        self.node_info_wd.setObjectName("node_info_wd")
        self.horizontalLayout_2 = QHBoxLayout(self.node_info_wd)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.node_info_lb = QLabel(self.node_info_wd)
        self.node_info_lb.setObjectName("node_info_lb")
        self.horizontalLayout_2.addWidget(self.node_info_lb)
        spacerItem1 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.show_sourse_btn = QPushButton(self.node_info_wd)
        self.show_sourse_btn.setMinimumSize(QSize(0, 40))
        self.show_sourse_btn.setObjectName("show_sourse_btn")
        self.horizontalLayout_2.addWidget(self.show_sourse_btn)
        self.horizontalLayout.addWidget(self.node_info_wd)
        self.file_info_wd = QWidget(self.toolbar_wd)
        self.file_info_wd.setObjectName("file_info_wd")
        self.horizontalLayout_3 = QHBoxLayout(self.file_info_wd)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout = QVBoxLayout()
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.file_info_static_lb = QLabel(self.file_info_wd)
        self.file_info_static_lb.setObjectName("file_info_static_lb")
        self.verticalLayout.addWidget(self.file_info_static_lb)
        self.scrollArea = QScrollArea(self.file_info_wd)
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setMaximumSize(QSize(16777215, 18))
        self.scrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scrollArea.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_2 = QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QRect(0, 0, 69, 16))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout_3 = QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.file_info_lb = QLabel(self.scrollAreaWidgetContents_2)
        self.file_info_lb.setObjectName("file_info_lb")
        self.verticalLayout_3.addWidget(self.file_info_lb)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents_2)
        self.verticalLayout.addWidget(self.scrollArea)
        self.horizontalLayout_3.addLayout(self.verticalLayout)
        spacerItem2 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.show_sourse_btn_2 = QPushButton(self.file_info_wd)
        self.show_sourse_btn_2.setMinimumSize(QSize(0, 40))
        self.show_sourse_btn_2.setObjectName("show_sourse_btn_2")
        self.horizontalLayout_3.addWidget(self.show_sourse_btn_2)
        self.horizontalLayout.addWidget(self.file_info_wd)
        self.empty_wd = QWidget(self.toolbar_wd)
        self.empty_wd.setObjectName("empty_wd")
        self.horizontalLayout_4 = QHBoxLayout(self.empty_wd)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem3 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.horizontalLayout.addWidget(self.empty_wd)
        self.horizontalLayout.setStretch(7, 1)
        self.horizontalLayout.setStretch(8, 1)
        self.horizontalLayout.setStretch(9, 1)
        self.verticalLayout_2.addWidget(self.toolbar_wd)
        self.tab_ly = QVBoxLayout()
        self.tab_ly.setObjectName("tab_ly")
        self.verticalLayout_2.addLayout(self.tab_ly)
        self.error_browser_ly = QVBoxLayout()
        self.error_browser_ly.setObjectName("error_browser_ly")
        self.verticalLayout_2.addLayout(self.error_browser_ly)
        self.verticalLayout_2.setStretch(1, 1)
        self.widget1 = QWidget(self.splitter)
        self.widget1.setObjectName("widget1")
        self.help_ly = QVBoxLayout(self.widget1)
        self.help_ly.setContentsMargins(0, 0, 0, 0)
        self.help_ly.setObjectName("help_ly")
        self.verticalLayout_4.addWidget(self.splitter)
        editor_window.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(editor_window)
        self.menubar.setGeometry(QRect(0, 0, 864, 21))
        self.menubar.setObjectName("menubar")
        self.menu_tabs = QMenu(self.menubar)
        self.menu_tabs.setObjectName("menu_tabs")
        self.backup_menu_act = QMenu(self.menu_tabs)
        self.backup_menu_act.setObjectName("backup_menu_act")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuEditor = QMenu(self.menubar)
        self.menuEditor.setObjectName("menuEditor")
        self.menuTheme = QMenu(self.menuEditor)
        self.menuTheme.setObjectName("menuTheme")
        self.menuTemplates = QMenu(self.menubar)
        self.menuTemplates.setObjectName("menuTemplates")
        editor_window.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(editor_window)
        self.statusbar.setObjectName("statusbar")
        editor_window.setStatusBar(self.statusbar)
        self.actionSave_to_file = QAction(editor_window)
        self.actionSave_to_file.setObjectName("actionSave_to_file")
        self.actionLoad_from_File = QAction(editor_window)
        self.actionLoad_from_File.setObjectName("actionLoad_from_File")
        self.create_from_node_act = QAction(editor_window)
        self.create_from_node_act.setObjectName("create_from_node_act")
        self.reload_source_act = QAction(editor_window)
        self.reload_source_act.setObjectName("reload_source_act")
        self.save_section_act = QAction(editor_window)
        self.save_section_act.setObjectName("save_section_act")
        self.manual_act = QAction(editor_window)
        self.manual_act.setObjectName("manual_act")
        self.about_act = QAction(editor_window)
        self.about_act.setObjectName("about_act")
        self.actionHelp_Window_2 = QAction(editor_window)
        self.actionHelp_Window_2.setCheckable(True)
        self.actionHelp_Window_2.setObjectName("actionHelp_Window_2")
        self.actionAutocompletion = QAction(editor_window)
        self.actionAutocompletion.setCheckable(True)
        self.actionAutocompletion.setObjectName("actionAutocompletion")
        self.vex_manual_act = QAction(editor_window)
        self.vex_manual_act.setObjectName("vex_manual_act")
        self.context_help_act = QAction(editor_window)
        self.context_help_act.setObjectName("context_help_act")
        self.save_tabs_in_hip_act = QAction(editor_window)
        self.save_tabs_in_hip_act.setCheckable(True)
        self.save_tabs_in_hip_act.setObjectName("save_tabs_in_hip_act")
        self.actionLoad_tabs = QAction(editor_window)
        self.actionLoad_tabs.setObjectName("actionLoad_tabs")
        self.create_from_file_act = QAction(editor_window)
        self.create_from_file_act.setObjectName("create_from_file_act")
        self.create_empty_act = QAction(editor_window)
        self.create_empty_act.setObjectName("create_empty_act")
        self.use_hou_browser_act = QAction(editor_window)
        self.use_hou_browser_act.setCheckable(True)
        self.use_hou_browser_act.setChecked(True)
        self.use_hou_browser_act.setObjectName("use_hou_browser_act")
        self.clear_tabs_act = QAction(editor_window)
        self.clear_tabs_act.setObjectName("clear_tabs_act")
        self.open_theme_editor_act = QAction(editor_window)
        self.open_theme_editor_act.setEnabled(True)
        self.open_theme_editor_act.setObjectName("open_theme_editor_act")
        self.set_font_size_act = QAction(editor_window)
        self.set_font_size_act.setObjectName("set_font_size_act")
        self.load_tabs_from_hip_act = QAction(editor_window)
        self.load_tabs_from_hip_act.setObjectName("load_tabs_from_hip_act")
        self.auto_create_parms_act = QAction(editor_window)
        self.auto_create_parms_act.setCheckable(True)
        self.auto_create_parms_act.setObjectName("auto_create_parms_act")
        self.theme_light_act = QAction(editor_window)
        self.theme_light_act.setObjectName("theme_light_act")
        self.theme_dark_act = QAction(editor_window)
        self.theme_dark_act.setObjectName("theme_dark_act")
        self.live_template_editor_act = QAction(editor_window)
        self.live_template_editor_act.setEnabled(True)
        self.live_template_editor_act.setObjectName("live_template_editor_act")
        self.use_online_manual_act = QAction(editor_window)
        self.use_online_manual_act.setCheckable(True)
        self.use_online_manual_act.setObjectName("use_online_manual_act")
        self.show_whitespaces_act = QAction(editor_window)
        self.show_whitespaces_act.setCheckable(True)
        self.show_whitespaces_act.setObjectName("show_whitespaces_act")
        self.check_new_version_act = QAction(editor_window)
        self.check_new_version_act.setObjectName("check_new_version_act")
        self.options_act = QAction(editor_window)
        self.options_act.setObjectName("options_act")
        self.clear_backups_act = QAction(editor_window)
        self.clear_backups_act.setObjectName("clear_backups_act")
        self.open_backup_folder_act = QAction(editor_window)
        self.open_backup_folder_act.setObjectName("open_backup_folder_act")
        self.save_to_new_act = QAction(editor_window)
        self.save_to_new_act.setObjectName("save_to_new_act")
        self.open_settings_folder_act = QAction(editor_window)
        self.open_settings_folder_act.setObjectName("open_settings_folder_act")
        self.help_window_act = QAction(editor_window)
        self.help_window_act.setCheckable(True)
        self.help_window_act.setObjectName("help_window_act")
        self.find_replace_act = QAction(editor_window)
        self.find_replace_act.setObjectName("find_replace_act")
        self.backup_menu_act.addAction(self.clear_backups_act)
        self.backup_menu_act.addAction(self.open_backup_folder_act)
        self.backup_menu_act.addSeparator()
        self.menu_tabs.addAction(self.create_from_node_act)
        self.menu_tabs.addAction(self.create_from_file_act)
        self.menu_tabs.addAction(self.create_empty_act)
        self.menu_tabs.addSeparator()
        self.menu_tabs.addAction(self.save_section_act)
        self.menu_tabs.addAction(self.save_to_new_act)
        self.menu_tabs.addAction(self.reload_source_act)
        self.menu_tabs.addSeparator()
        self.menu_tabs.addAction(self.load_tabs_from_hip_act)
        self.menu_tabs.addAction(self.clear_tabs_act)
        self.menu_tabs.addSeparator()
        self.menu_tabs.addAction(self.backup_menu_act.menuAction())
        self.menuHelp.addAction(self.manual_act)
        self.menuHelp.addAction(self.vex_manual_act)
        self.menuHelp.addAction(self.context_help_act)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.check_new_version_act)
        self.menuHelp.addAction(self.about_act)
        self.menuTheme.addAction(self.open_theme_editor_act)
        self.menuTheme.addSeparator()
        self.menuEditor.addAction(self.menuTheme.menuAction())
        self.menuEditor.addAction(self.options_act)
        self.menuEditor.addAction(self.find_replace_act)
        self.menuEditor.addSeparator()
        self.menuEditor.addAction(self.open_settings_folder_act)
        self.menuTemplates.addAction(self.live_template_editor_act)
        self.menuTemplates.addSeparator()
        self.menubar.addAction(self.menu_tabs.menuAction())
        self.menubar.addAction(self.menuEditor.menuAction())
        self.menubar.addAction(self.menuTemplates.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(editor_window)
        QMetaObject.connectSlotsByName(editor_window)

    def retranslateUi(self, editor_window):
        editor_window.setWindowTitle(QApplication.translate("editor_window", "VEX Editor", None))
        self.load_from_selected_btn.setToolTip(QApplication.translate("editor_window", "<html><head/><body><p>Auto load VEX parameter from selected node</p></body></html>", None))
        self.load_from_selected_btn.setText(QApplication.translate("editor_window", "L", None))
        self.load_from_selected_extra_btn.setToolTip(QApplication.translate("editor_window", "<html><head/><body><p>Set VEX parameter from parameter list on selected node</p></body></html>", None))
        self.load_from_selected_extra_btn.setText(QApplication.translate("editor_window", "L+", None))
        self.load_from_file_btn.setToolTip(QApplication.translate("editor_window", "<html><head/><body><p>Open .h file from disk</p></body></html>", None))
        self.load_from_file_btn.setText(QApplication.translate("editor_window", "F", None))
        self.blank_tab_btn.setToolTip(QApplication.translate("editor_window", "<html><head/><body><p>Create New Empty Tab</p></body></html>", None))
        self.blank_tab_btn.setText(QApplication.translate("editor_window", "B", None))
        self.save_current_btn.setToolTip(QApplication.translate("editor_window", "<html><head/><body><p>Save code (Ctrl+Enter)</p></body></html>", None))
        self.save_current_btn.setText(QApplication.translate("editor_window", "S", None))
        self.reload_current_btn.setToolTip(QApplication.translate("editor_window", "<html><head/><body><p>Reload sourse code</p></body></html>", None))
        self.reload_current_btn.setText(QApplication.translate("editor_window", "R", None))
        self.node_info_lb.setText(QApplication.translate("editor_window", "<html><head/><body><p>Node: /obj/geo1/nodename<br/>Parm: snippet</p></body></html>", None))
        self.show_sourse_btn.setText(QApplication.translate("editor_window", "Select Node", None))
        self.file_info_static_lb.setText(QApplication.translate("editor_window", "<html><head/><body><p>File Path:</p></body></html>", None))
        self.file_info_lb.setText(QApplication.translate("editor_window", "<html><head/><body><p>path</p></body></html>", None))
        self.show_sourse_btn_2.setText(QApplication.translate("editor_window", "Open Folder", None))
        self.menu_tabs.setTitle(QApplication.translate("editor_window", "Tabs", None))
        self.backup_menu_act.setTitle(QApplication.translate("editor_window", "Backups", None))
        self.menuHelp.setTitle(QApplication.translate("editor_window", "Help", None))
        self.menuEditor.setTitle(QApplication.translate("editor_window", "Editor", None))
        self.menuTheme.setTitle(QApplication.translate("editor_window", "Theme", None))
        self.menuTemplates.setTitle(QApplication.translate("editor_window", "Templates", None))
        self.actionSave_to_file.setText(QApplication.translate("editor_window", "Save vex file", None))
        self.actionLoad_from_File.setText(QApplication.translate("editor_window", "Load vex File", None))
        self.create_from_node_act.setText(QApplication.translate("editor_window", "Create From Selected Node", None))
        self.reload_source_act.setText(QApplication.translate("editor_window", "Reload Current Tab From Sourse", None))
        self.save_section_act.setText(QApplication.translate("editor_window", "Save Current Code", None))
        self.manual_act.setText(QApplication.translate("editor_window", "Manual", None))
        self.about_act.setText(QApplication.translate("editor_window", "About", None))
        self.actionHelp_Window_2.setText(QApplication.translate("editor_window", "Help Window", None))
        self.actionAutocompletion.setText(QApplication.translate("editor_window", "Autocompletion", None))
        self.vex_manual_act.setText(QApplication.translate("editor_window", "VEX Documentation", None))
        self.context_help_act.setText(QApplication.translate("editor_window", "Show help for selected method", None))
        self.context_help_act.setShortcut(QApplication.translate("editor_window", "Shift+F1", None))
        self.save_tabs_in_hip_act.setText(QApplication.translate("editor_window", "Save Tabs Inside HIP", None))
        self.actionLoad_tabs.setText(QApplication.translate("editor_window", "Load Tabs", None))
        self.create_from_file_act.setText(QApplication.translate("editor_window", "Create From File", None))
        self.create_empty_act.setText(QApplication.translate("editor_window", "Create Empty Tab", None))
        self.use_hou_browser_act.setText(QApplication.translate("editor_window", "Use Houdini Browser", None))
        self.clear_tabs_act.setText(QApplication.translate("editor_window", "Clear Saved Tabs", None))
        self.open_theme_editor_act.setText(QApplication.translate("editor_window", "Edit Theme...", None))
        self.set_font_size_act.setText(QApplication.translate("editor_window", "Font Size...", None))
        self.load_tabs_from_hip_act.setText(QApplication.translate("editor_window", "Load Tabs From Current HIP", None))
        self.auto_create_parms_act.setText(QApplication.translate("editor_window", "Auto Update Node Spare Parameters On Save", None))
        self.theme_light_act.setText(QApplication.translate("editor_window", "Light", None))
        self.theme_dark_act.setText(QApplication.translate("editor_window", "Dark", None))
        self.live_template_editor_act.setText(QApplication.translate("editor_window", "Templates Editor...", None))
        self.use_online_manual_act.setText(QApplication.translate("editor_window", "Use Online Manual", None))
        self.show_whitespaces_act.setText(QApplication.translate("editor_window", "Show Whitespaces", None))
        self.check_new_version_act.setText(QApplication.translate("editor_window", "Check New Version", None))
        self.options_act.setText(QApplication.translate("editor_window", "Options...", None))
        self.clear_backups_act.setText(QApplication.translate("editor_window", "Clear backups", None))
        self.open_backup_folder_act.setText(QApplication.translate("editor_window", "Open folder", None))
        self.save_to_new_act.setText(QApplication.translate("editor_window", "Save as...", None))
        self.open_settings_folder_act.setText(QApplication.translate("editor_window", "Open settings folder", None))
        self.help_window_act.setText(QApplication.translate("editor_window", "Help Window", None))
        self.find_replace_act.setText(QApplication.translate("editor_window", "Find and Replace...", None))
        self.find_replace_act.setShortcut(QApplication.translate("editor_window", "Ctrl+F", None))

